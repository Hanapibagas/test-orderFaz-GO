// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	user "orderfaz-1/features/user"

	mock "github.com/stretchr/testify/mock"
)

// UserData is an autogenerated mock type for the UserDataInterface type
type UserData struct {
	mock.Mock
}

// GetByUuid provides a mock function with given fields: uuid
func (_m *UserData) GetByUuid(uuid string) (*user.LoginCore, error) {
	ret := _m.Called(uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetByUuid")
	}

	var r0 *user.LoginCore
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*user.LoginCore, error)); ok {
		return rf(uuid)
	}
	if rf, ok := ret.Get(0).(func(string) *user.LoginCore); ok {
		r0 = rf(uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.LoginCore)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: msisdn, password
func (_m *UserData) Login(msisdn string, password string) (*user.LoginCore, error) {
	ret := _m.Called(msisdn, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *user.LoginCore
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*user.LoginCore, error)); ok {
		return rf(msisdn, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) *user.LoginCore); ok {
		r0 = rf(msisdn, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.LoginCore)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(msisdn, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: input
func (_m *UserData) Register(input user.RegisterCore) (*user.RegisterCore, string, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *user.RegisterCore
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(user.RegisterCore) (*user.RegisterCore, string, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(user.RegisterCore) *user.RegisterCore); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.RegisterCore)
		}
	}

	if rf, ok := ret.Get(1).(func(user.RegisterCore) string); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(user.RegisterCore) error); ok {
		r2 = rf(input)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewUserData creates a new instance of UserData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserData(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserData {
	mock := &UserData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
